package com.voler.report;

import com.google.auto.service.AutoService;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import com.voler.Logger;
import com.voler.annotation.ReportEvent;
import com.voler.annotation.ReportParameter;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

import java.io.IOException;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;
import javax.lang.model.util.Types;

@AutoService(Processor.class)
@SupportedAnnotationTypes({"com.voler.annotation.ReportEvent", "com.voler.annotation.ReportParameter"})
@SupportedSourceVersion(SourceVersion.RELEASE_7)
public class ReportProcessor extends AbstractProcessor {


    private Elements elementUtils;
    private Filer filer;
    private Types typeUtils;
    private Logger logger;

    /**
     * init()方法会被注解处理工具调用，并输入ProcessingEnviroment参数。
     * ProcessingEnviroment提供很多有用的工具类Elements, Types 和 Filer
     *
     * @param processingEnv 提供给 processor 用来访问工具框架的环境
     */
    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        elementUtils = processingEnv.getElementUtils();
        filer = processingEnv.getFiler();
        typeUtils = processingEnv.getTypeUtils();
        logger = new Logger(processingEnv.getMessager());
        logger.info(">>>>>>> ReportProcessor init");
    }

    /**
     * 这相当于每个处理器的主函数main()，你在这里写你的扫描、评估和处理注解的代码，以及生成Java文件。
     * 输入参数RoundEnviroment，可以让你查询出包含特定注解的被注解元素
     *
     * @param annotations 请求处理的注解类型
     * @param roundEnv    有关当前和以前的信息环境
     * @return 如果返回 true，则这些注解已声明并且不要求后续 Processor 处理它们；
     * 如果返回 false，则这些注解未声明并且可能要求后续 Processor 处理它们
     */
    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        if (CollectionUtils.isEmpty(annotations)) return false;
        logger.info(">>>>>>>> processor start...");
        try {
            // roundEnv.getElementsAnnotatedWith()返回使用给定注解类型的元素
            parseRoutes(roundEnv.getElementsAnnotatedWith(ReportEvent.class));
        } catch (Exception e) {
            logger.error(e);
        }
        return true;
    }

    private void parseRoutes(Set<? extends Element> elements) throws IOException {
        if (CollectionUtils.isEmpty(elements)) return;
        logger.info(">>> Found ReportEvent, size is " + elements.size() + " <<<");

        TypeSpec.Builder reportUtil = TypeSpec.classBuilder("ReportUtil")
                .addJavadoc("DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY REPORT.")
                .addModifiers(Modifier.PUBLIC);

        for (Element element : elements) {
            ReportEvent reportEvent = element.getAnnotation(ReportEvent.class);
            if (reportEvent == null) continue;
            String methodName = StringUtils.isEmpty(reportEvent.value()) ? element.getSimpleName().toString() : reportEvent.value();

            MethodSpec.Builder reportMethod = MethodSpec.methodBuilder(methodName)
                    .addModifiers(Modifier.PUBLIC)
                    .addModifiers(Modifier.STATIC)
                    .addStatement("$T params = new $T()", ClassName.get("android.os", "Bundle"), ClassName.get("android.os", "Bundle"));


            for (Element field : element.getEnclosedElements()) {
                if (field.getKind().isField() && field.getAnnotation(ReportParameter.class) != null) {
                    ReportParameter paramConfig = field.getAnnotation(ReportParameter.class);
                    String parameter = StringUtils.isEmpty(paramConfig.value()) ? field.getSimpleName().toString() : paramConfig.value();
                    TypeName typeName = ClassName.get(field.asType());
                    reportMethod.addParameter(typeName, parameter)
                            .addStatement(String.format("params.putString(\"%s\",%s)", parameter, parameter));
                }
            }
            reportMethod.addStatement(String.format("$T.putEntry(\"%s\",params)", methodName), ClassName.get("com.onemena.utils", "TongJiUtil"));
            reportUtil.addMethod(reportMethod.build());
        }
        JavaFile.builder("com.onemena.util", reportUtil.build()).build().writeTo(filer);
    }

}
